function doStuffWithClasses(data)
{
    var today = new Date();
    var class1 = null;
    var class2 = null;

    for (var i = 0; i < data.classes.length; i++)
    {
        for (var j = 0; j < data.classes[i].dates.length; j++)
        {
            var date2 = new Date(data.classes[i].dates[j]);
					
					if (date2 >= today)
					{            
            	  var timeDiff = Math.abs(date2.getTime() - today.getTime());

                if (!class1)
                {
                    class1 = [doTClassesObject(data.classes[i], j), timeDiff];
                }
                else if (!class2)
                {
                    class2 = [doTClassesObject(data.classes[i], j), timeDiff];
                }
                else if (timeDiff < class1[1])
                {
                    class2 = class1;
                    class1 = [doTClassesObject(data.classes[i], j), timeDiff];
                }
                else if (timeDiff == class1[1] || timeDiff < class2[1])
                {
                    class2 = [doTClassesObject(data.classes[i], j), timeDiff];
                }
            }
        }
    }
    
    var child = document.createElement('div');
    child.innerHTML = doTClasses( { "array" : [ class1[0], class2[0] ] } );
    child = child.firstChild;
    document.getElementById('insertClasses').appendChild(child); 
}

function loadClasses(onLoad)
{
    var request = new XMLHttpRequest();
    request.open("GET", "https://api.github.com/repos/woolandsilkco/woolandsilkco.github.io/contents/classesmin.json", true);

    request.onload = function()
    {
        onLoad(JSON.parse(atob(JSON.parse(request.response).content.replace(/\s/g, ''))));
    }

    request.onerror = function()
    {
        alert('BufferLoader: XHR error');
    }

    request.send();
}

/* doT.js template code generated by the following template:
 *      <span>{{~it.array :value:index}}<h3>{{=value.date}} - {{=value.title}}!</h3><p>{{=value.description}}</p>{{~}}</span>
 */
function doTClasses(it) { var out='<span>';var arr1=it.array;if(arr1){var value,index=-1,l1=arr1.length-1;while(index<l1){value=arr1[index+=1];out+='<h3>'+(value.date)+' - '+(value.title)+'!</h3><p>'+(value.description)+'</p>';} } out+='</span>';return out; }

function doTClassesObject(data, index)
{
    return { "title":data.title, "date":data.dates[index], "description":data.description };
}

/* doT.js template code generated by the following template:
 *      {{~it.array :value:index}}
 *          <div class="classbox">
 *              <h2>{{=value.title}}{{? value.parts > 1}} - {{=value.parts}} Parts{{?}} <span>{{=value.cost}}</span></h2>
 *              {{? value.note}}<h3>Note: {{=value.note}}</h3>{{?}}
 *              <h4>Dates</h4>
 *              <p>{{~value.dates :value2:index2}}{{? index2 > 0}}, {{?}}{{=value2}}{{~}}</p>
 *              <h4>Times</h4>
 *              <p>{{~value.times :value2:index2}}{{? index2 > 0}} OR {{?}}{{=value2}}{{~}}</p>
 *              <h4>Description</h4>
 *              <p>{{=value.description}}</p>
 *              <h4>Prerequisites</h4>
 *              <p>{{=value.prerequisites}}</p>
 *              <h4>Supplies</h4>
 *              <p>{{=value.supplies}}</p>
 *              <h4>Elements to Learn</h4>  
 *              <ul>
 *                  {{~value.elements :value2:index2}}
 *                      <li>{{=value2}}</li>
 *                  {{~}}
 *              </ul>
 *          </div>
 *      {{~}}
 */
function doTSummary(it) { var out='';var arr1=it.array;if(arr1){var value,index=-1,l1=arr1.length-1;while(index<l1){value=arr1[index+=1];out+='<div class="classbox"> <h2>'+(value.title);if(value.parts > 1){out+=' - '+(value.parts)+' Parts';}out+=' <span>'+(value.cost)+'</span></h2> ';if(value.note){out+='<h3>Note: '+(value.note)+'</h3>';}out+=' <h4>Dates</h4> <p>';var arr2=value.dates;if(arr2){var value2,index2=-1,l2=arr2.length-1;while(index2<l2){value2=arr2[index2+=1];if(index2 > 0){out+=', ';}out+=''+(value2);} } out+='</p> <h4>Times</h4> <p>';var arr3=value.times;if(arr3){var value2,index2=-1,l3=arr3.length-1;while(index2<l3){value2=arr3[index2+=1];if(index2 > 0){out+=' OR ';}out+=''+(value2);} } out+='</p> <h4>Description</h4> <p>'+(value.description)+'</p> <h4>Prerequisites</h4> <p>'+(value.prerequisites)+'</p> <h4>Supplies</h4> <p>'+(value.supplies)+'</p> <h4>Elements to Learn</h4> <ul> ';var arr4=value.elements;if(arr4){var value2,index2=-1,l4=arr4.length-1;while(index2<l4){value2=arr4[index2+=1];out+=' <li>'+(value2)+'</li> ';} } out+=' </ul></div>';} } return out; }

